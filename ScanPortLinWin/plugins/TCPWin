#include <iostream>
#include <windows.h>
#include <WinSock2.h>
#include <WS2tcpip.h>

#pragma comment(lib, "Ws2_32.lib")

#include "PluginScaner.h"

class PluginTCP : public InterfacePlugin {
    void InitPlugin()  {
        std::cout << "**************" << std::endl;
        std::cout << "ScanerTcp:" << std::endl;
        std::cout << "**************" << std::endl;
    }
    void WorkPlugin(int s, int e)  {
        WSADATA Data;
        int Status = WSAStartup(MAKEWORD(2, 2), &Data);

        if (Status != 0) {
            std::cout << "WSAStartup Error: " << Status << std::endl;
            return 1;
        }

        in_addr ip;
        Status = inet_pton(AF_INET, "127.0.0.1", &ip);

        if (Status <= 0) {
            std::cout << "Error ip" << std::endl;
            WSACleanup();
            return 1;
        }

        sockaddr_in ServerInfo;
        ServerInfo.sin_family = AF_INET;
        ServerInfo.sin_addr = ip;

        const int startPort = s;
        const int endPort = e;

        for (int port = startPort; port <= endPort; ++port) {
            SOCKET ServSock = socket(AF_INET, SOCK_STREAM, 0);

            if (ServSock == INVALID_SOCKET) {
                std::cout << "Error initialization socket # " << WSAGetLastError() << std::endl;
                WSACleanup();
                return 1;
            }

            ServerInfo.sin_port = htons(port);
            Status = connect(ServSock, (sockaddr*)&ServerInfo, sizeof(ServerInfo));

            if (Status == 0) {
                std::cout << "Port " << port << " is open" << std::endl;
            }
            else {
                std::cout << "Port " << port << " Error: " << WSAGetLastError() << std::endl;

            }
            closesocket(ServSock);
        }
        WSACleanup();
	}
};

extern "C" __declspec(dllexport) InterfacePlugin* __cdecl CreatePlugin() {
    return new PluginTCP();
}

extern "C" __declspec(dllexport) void __cdecl DeletePlugin(InterfacePlugin* plugin) {
    delete plugin;
}
